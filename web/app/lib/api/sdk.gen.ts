// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { RootData, RootResponses, GenerateArticleData, GenerateArticleResponses, GenerateArticleErrors, GetArticleData, GetArticleResponses, GetArticleErrors, GetArticleProtoData, GetArticleProtoResponses, GetArticleProtoErrors, GetArticleProtoWithContextData, GetArticleProtoWithContextResponses, GetArticleProtoWithContextErrors, GetArticleProtoWithRelatedData, GetArticleProtoWithRelatedResponses, GetArticleProtoWithRelatedErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Root
 */
export const root = <ThrowOnError extends boolean = false>(options?: Options<RootData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RootResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Generate Article
 * Generate an article based on the provided parameters.
 */
export const generateArticle = <ThrowOnError extends boolean = false>(options: Options<GenerateArticleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).sse.post<GenerateArticleResponses, GenerateArticleErrors, ThrowOnError>({
        url: '/spaces/{space_name}/articles/{title}/generate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Article
 * Get a proto article with context for the given title.
 */
export const getArticle = <ThrowOnError extends boolean = false>(options: Options<GetArticleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetArticleResponses, GetArticleErrors, ThrowOnError>({
        url: '/spaces/{space_name}/articles/{title}',
        ...options
    });
};

/**
 * Get Article Proto
 * Get a proto article with context for the given title.
 */
export const getArticleProto = <ThrowOnError extends boolean = false>(options: Options<GetArticleProtoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetArticleProtoResponses, GetArticleProtoErrors, ThrowOnError>({
        url: '/spaces/{space_name}/articles/{title}/proto',
        ...options
    });
};

/**
 * Get Article Proto With Context
 * Get a proto article with context for the given title.
 */
export const getArticleProtoWithContext = <ThrowOnError extends boolean = false>(options: Options<GetArticleProtoWithContextData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetArticleProtoWithContextResponses, GetArticleProtoWithContextErrors, ThrowOnError>({
        url: '/spaces/{space_name}/articles/{title}/proto/context',
        ...options
    });
};

/**
 * Get Article Proto With Related
 * Get a proto article with related articles for the given title.
 */
export const getArticleProtoWithRelated = <ThrowOnError extends boolean = false>(options: Options<GetArticleProtoWithRelatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetArticleProtoWithRelatedResponses, GetArticleProtoWithRelatedErrors, ThrowOnError>({
        url: '/spaces/{space_name}/articles/{title}/proto/related',
        ...options
    });
};